package com.craftinginterpreters.tool;

import java.util.List;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Collections;

public class GenerateAst {

    private static final String PACKAGE = "com.craftinginterpreters.lox";
    private static final String LONG_FUCKING_ASS_NAME_JAVA_PROJECT_STRUCTURE_THAT_I_HATE_IF_YOU_READ_THIS_TO_I_HOPE_YOU_HATE_THIS_SHIT = "./src/main/java/com/craftinginterpreters/lox";

    private static enum ToGen {
        Expr(Collections.emptyList()),
        Binary(List.of("Expr left", "Token operator", "Expr right")),
        Grouping(List.of("Expr expression")),
        Literal(List.of("LoxValue value")),
        Unary(List.of("Token operator, Expr right"));

        final List<String> args;

        ToGen(List<String> args) {
            this.args = args;
        }

        ToGen getBase() {
            return Expr;
        }

        String codegen() {
            ToGen[] cs = values();
            if (cs.length <= 1) {
                throw new IllegalStateException("Che cazzo genero?\nMetti qualcosa in questa spaccimma di enum.");
            }

            StringBuilder sb = new StringBuilder("// AUTOGENERATED CLASS\n");
            sb.append(String.format("package %s;\n\n", PACKAGE));

            if (this == ToGen.Expr) {
                sb.append(String.format("public sealed interface %s permits ", toString()));
                int i;
                for (i = 1; i < cs.length; i++) {
                    sb.append(String.format("%s%s ", cs[i], i < cs.length - 1 ? "," : ""));
                }
                sb.append("{\n");
                addVisitorInterfaceAndAccept(sb);
                sb.append("}");
            } else {
                sb.append(String.format("public record %s(", toString()));
                sb.append(String.join(", ", args));
                sb.append(String.format(") implements %s { }\n", getBase()));
            }
            return sb.toString();
        }

        private void addVisitorInterfaceAndAccept(StringBuilder sb) {
            sb.append("\tpublic static class VisitException extends Exception {\n");
            sb.append("\t\tpublic VisitException(String msg) {\n");
            sb.append("\t\t\tsuper(msg);\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n\n");
            sb.append("\tpublic interface Visitor<T> {\n");
            for (int i = 1; i < values().length; i++) {
                String name = values()[i].toString();
                sb.append(String.format("\t\tpublic T visit%sExpr(%s expr) throws VisitException;\n", name, name));
            }
            sb.append("\t}\n\n");
            sb.append("\tpublic static <T> T accept(Expr expr, Visitor<T> v) throws VisitException {\n");
            sb.append("\t\treturn switch(expr) {\n");
            for (int i = 1; i < values().length; i++) {
                ToGen toGen = values()[i];
                sb.append(String.format("\t\t\tcase %s e -> v.visit%sExpr(e);\n", toGen, toGen));
            }
            sb.append("\t\t};\n");
            sb.append("\t}\n");
        }
    }

    public static void defineAst(String baseDir) throws IOException {
        for (ToGen toGen : ToGen.values()) {
            String filename = String.format("%s.java", toGen.toString());
            Path path = Paths.get(baseDir, filename);
            System.out.printf("Generating '%s': ", path.toString());
            String code = toGen.codegen();
            Files.writeString(path, code,
                    StandardOpenOption.CREATE,
                    StandardOpenOption.TRUNCATE_EXISTING,
                    StandardOpenOption.WRITE);
            System.out.println("OK");
        }
    }

    public static void main(String[] args) {
        System.out.println("AUTOGEN CODE STARTED");
        try {
            defineAst(
                    LONG_FUCKING_ASS_NAME_JAVA_PROJECT_STRUCTURE_THAT_I_HATE_IF_YOU_READ_THIS_TO_I_HOPE_YOU_HATE_THIS_SHIT);
        } catch (IOException io) {
            io.printStackTrace();
            return;
        }
        System.out.println("COMPLETED");
    }

}
